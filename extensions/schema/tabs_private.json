// Copyright (c) 2016 Vivaldi Technologies AS. All rights reserved

[
  {
    "namespace": "tabsPrivate",
    "description": "Use the <code>vivaldi.tabsPrivate</code> API to update tabs",
    "compiler_options": {
      "implemented_in": "extensions/api/tabs/tabs_private_api.h"
    },
    "types": [
      {
        "id": "TabAlertState",
        "type": "string",
        "description": "The active media type.",
        "enum": [ "empty", "recording", "capturing", "playing", "muting", "bluetooth", "usb",
                  "pip", "desktop_capturing", "vr_presenting_in_headset", "serial_connected" ]
      },
      {
        "id": "UpdateTabInfo",
        "type": "object",
        "description": "Object passed to the update and returned in the get function function.",
        "properties": {
          "showImages": {
            "type": "boolean",
            "optional": true,
            "description": "Show images for all pages loaded in this tab. Default is true."
          },
          "loadFromCacheOnly": {
            "type": "boolean",
            "optional": true,
            "description": "Only load the page from cache. Default is false."
          },
          "enablePlugins": {
            "type": "boolean",
            "optional": true,
            "description": "Enable plugins on this tab. Default is true."
          },
          "mimeType": {
            "type": "string",
            "optional": true,
            "description": "The current documents mimetype."
          },
          "muteTab": {
            "type": "boolean",
            "optional": true,
            "description": "If the tab should be quiet."
          },
          "hasBeforeUnloadHandler":  {
            "type": "boolean",
            "optional": true,
            "description": "(read only) This tab has a before unload handler."
          }
        }
      },
      {
        "id": "DragData",
        "type": "object",
        "description": "Provides custom drag data.",
        "properties": {
          "mimeType": {
            "type": "string",
            "description": "The mime type to use for the custom data."
          },
          "customData": {
            "type": "string",
            "description": "The custom data."
          },
          "url": {
            "type": "string",
            "description": "The url for the data. Needed for the html5 drag and drop engine. Not set in the onDropEnd event."
          },
          "title": {
            "type": "string",
            "description": "The title for the data. Needed for the html5 drag and drop engine. Not set in the onDropEnd event."
          },
          "posX": {
            "type": "number",
            "description": "X offset inside the given app window in the UI coordinates."
          },
          "posY": {
            "type": "number",
            "description": "Y offset inside the given app window in the UI coordinates."
          },
          "width": {
            "type": "number",
            "description": "Width of the capture in the UI coordinates."
          },
          "height": {
            "type": "number",
            "description": "Height of the capture in the UI coordinates."
          },
          "cursorX": {
            "type": "integer",
            "description": "X offset into the image for the cursor during drag."
          },
          "cursorY": {
            "type": "integer",
            "description": "Y offset into the image for the cursor during drag."
          },
          "isFromTouch": {
            "type": "boolean",
            "optional": true,
            "description": "True if the drag was initiated from touch. Default is false."
          }
        }
      },
      {
        "id": "NavigationRect",
        "type": "object",
        "description": "Rect struct for spatial navigation.",
        "properties": {
          "left": {
            "type": "integer",
            "description": "left"
          },
          "top": {
            "type": "integer",
            "description": "top"
          },
          "width": {
            "type": "integer",
            "description": "width"
          },
          "height": {
            "type": "integer",
            "description": "height"
          },
          "right": {
            "type": "integer",
            "description": "right"
          },
          "bottom": {
            "type": "integer",
            "description": "bottom"
          },
          "path": {
            "type": "string",
            "description": "Element path to uniquely identify element."
          },
          "href": {
            "type": "string",
            "description": "Url of focused element in case it's a link."
          }
        }
      }
    ],
    "functions": [
      {
        "name": "update",
        "type": "function",
        "description": "Update the given tab with Vivaldi-specific properties.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "name": "tabInfo",
            "$ref": "UpdateTabInfo"
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "tabInfo",
                "$ref": "UpdateTabInfo",
                "description": "Return value with the updated tab info."
              }
            ]
          }
        ]
      },
      {
        "name": "get",
        "type": "function",
        "description": "Get Vivaldi-specific properties from the tab.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "tabInfo",
                "$ref": "UpdateTabInfo"
              }
            ]
          }
        ]
      },
      {
        "name": "insertText",
        "type": "function",
        "description": "Insert text into editable fields.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "string",
            "name": "text",
            "description": "The text to insert"
          }
        ]
      },
      {
        "name": "startDrag",
        "type": "function",
        "description": "Starts the HTML5 drag of the given tabs.",
        "parameters": [
          {
            "$ref": "DragData",
            "name": "dragData",
            "description": "The drag data to be transported in the dataobject."
          }
        ]
      },
      {
        "name": "scrollPage",
        "type": "function",
        "description": "Scrolls the page up or down, depending on a parameter",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "scrollType",
            "type": "string",
            "description": "Whether to scroll up or down, and by how much"
          },
          {
            "name": "scrollAmount",
            "type": "integer",
            "optional": "true",
            "description": "The amount to scroll by"
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Callback function used for error handling",
            "parameters": []
          }
        ]
      },
      {
        "name": "getSpatialNavigationRects",
        "type": "function",
        "description": "Get rectangles for spatially navigable elements.",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "minimum": 0
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "parameters": [
              {
                "name": "navigationRectList",
                "type": "array",
                "items": { "$ref": "NavigationRect" },
                "description": "All navigable rects on the page."
              }
            ]
          }
        ]
      },
      {
        "name": "getScrollPosition",
        "type": "function",
        "description": "Get scroll position of webview. Corresponds to window.scrollX and window.scrollY.",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "minimum": 0
          },
          {
            "type": "function",
            "name": "callback",
            "optional": false,
            "parameters": [
              {
                "name": "scrollX",
                "type": "integer",
                "description": "Horizontal scroll coordinate"
              },
              {
                "name": "scrollY",
                "type": "integer",
                "description": "Vertical scroll coordinate"
              }
            ]
          }
        ]
      },
      {
        "name": "activateElementFromPoint",
        "type": "function",
        "description": "Find element from given coordinates and activate it.",
        "parameters": [
          {
            "name": "tabId",
            "type": "integer",
            "minimum": 0
          },
          {
            "name": "x",
            "type": "integer",
            "minimum": 0,
            "description": "Horizontal co-ordinate from the left"
          },
          {
            "name": "y",
            "type": "integer",
            "minimum": 0,
            "description": "Vertical co-ordinate from the top"
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onMediaStateChanged",
        "type": "function",
        "description": "Fired when the media state changes on the tab.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "integer",
            "name": "windowId",
            "minimum": 0
          },
          {
            "name": "tabState",
            "$ref": "TabAlertState"
          }
        ]
      },
      {
        "name": "onThemeColorChanged",
        "type": "function",
        "description": "Fired when a meta theme-color has a value from the web page.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "string",
            "name": "rgb",
            "description": "Fired when the theme-color in the meta header field has changed. Format is #rrggbb and provided in css hex."
          }
        ]
      },
      {
        "name": "onTabUpdated",
        "type": "function",
        "description": "Fires when a |WebContent| is changed in some way.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "name": "tabInfo",
            "$ref": "UpdateTabInfo"
          }
        ]
      },
      {
        "name": "onDragEnd",
        "type": "function",
        "description": "Fires when tab dragging ends.",
        "parameters": [
          {
            "name": "dragAborted",
            "type": "boolean",
            "description": "This is an aborted drag (using ESC or similar)."
          },
          {
            "name": "dropOutsideWindow",
            "type": "boolean",
            "description": "This is a valid drop outside any app window."
          },
          {
            "name": "posX",
            "type": "integer",
            "description": "X position of the drop in screen coordinates."
          },
          {
            "name": "posY",
            "type": "integer",
            "description": "Y position of the drop in screen coordinates."
          }
        ]
      },
      {
        "name": "onPermissionAccessed",
        "type": "function",
        "description": "Fires when a |permission| is accessed.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0
          },
          {
            "type": "string",
            "name": "permission"
          },
          {
            "type": "string",
            "name": "origin"
          },
          {
            "type": "string",
            "description": "Current permission setting. 'allow', 'block', 'ask' or 'default'",
            "name": "blocked"
          }
        ]
      },
      {
        "name": "onKeyboardChanged",
        "type": "function",
        "description": "Fires for all keyboard changes that have not been consumed by the browser",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the browser window this keyboard event originates from."
          },
          {
            "type": "boolean",
            "name": "down",
            "description": "True when pressed, false when released"
          },
          {
            "type": "integer",
            "name": "modifiers",
            "description": "Modifier state when change occured"
          },
          {
            "type": "integer",
            "name": "windowsKeyCode",
            "description": "Value of key that changed"
          },
          {
            "type": "boolean",
            "name": "afterGesture",
            "description": "True when the keyboard event completed a mouse or wheel gesture"
          }
        ]
      },
      {
        "name": "onMouseChanged",
        "type": "function",
        "description": "Fires when mouse state has changed.",
        "parameters": [
          {
            "type": "boolean",
            "name": "motion",
            "description": "True when mouse has moved, false when mouse is pressed/released."
          }
        ]
      },
      {
        "name": "onKeyboardShortcut",
        "type": "function",
        "description": "Fires when on a keystroke that hasn't been consumed by the browser",
        "parameters": [
          {
            "type": "string",
            "name": "shortcutText",
            "description": "String representation of a keyboard shortcut"
          },
          {
            "type": "boolean",
            "name": "autoRepeat",
            "description": "True if the shortcut is generated as a result of automatic keyboard repeat"
          }
        ]
      },
      {
        "name": "onTabIsDetached",
        "type": "function",
        "description": "Fired when a tab that is moved out of a window detaches from the source-window. This is used to make sure two WebViews don't try to use the same WebContents.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0,
            "description": "Tab id used for Tabstrip WebContents retrieval."
          },
          {
            "type": "integer",
            "name": "windowId",
            "minimum": 0,
            "description": "Target WindowId that the message is intended. As in not the window it is detached from, but the window it is attached to."
          }
        ]
      },
      {
        "name": "onTabIsAttached",
        "type": "function",
        "description": "Fired when a WebContents is attached to an embedder. This is used to make sure two WebViews don't try to use the same WebContents.",
        "parameters": [
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0,
            "description": "Tab id used for Tabstrip WebContents retrieval."
          },
          {
            "type": "integer",
            "name": "windowId",
            "description": "WindowId of the embedder."
          },
          {
            "name": "tabState",
            "$ref": "TabAlertState"
          }
        ]
      },
      {
        "name": "onMouseGestureDetection",
        "type": "function",
        "description": "Fires when we detect a possible start of a mouse-gesture related event",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          }
        ]
      },
      {
        "name": "onMouseGesture",
        "type": "function",
        "description": "Fires when the user triggered a mouse gesture",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          },
          {
            "type": "number",
            "name": "clientX",
            "description": "X-coordinate of the gesture start point"
          },
          {
            "type": "number",
            "name": "clientY",
            "description": "Y-coordinate of the gesture start point"
          },
          {
            "type": "string",
            "name": "gestureDirections",
            "description": "Sequence of gesture directions"
          }
        ]
      },
      {
        "name": "onTabSwitchEnd",
        "type": "function",
        "description": "Fires when the tab switch using mouse wheel terminates",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          }
        ]
      },
      {
        "name": "onRockerGesture",
        "type": "function",
        "description": "Fires when the user triggered a rocker gesture",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          },
          {
            "type": "boolean",
            "name": "isLeft",
            "description": "True if this is the left rocker gesture"
          }
        ]
      },
      {
        "name": "onWebviewClickCheck",
        "type": "function",
        "description": "Fires to check if the user clicks on a webview.",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          },
          {
            "type": "boolean",
            "name": "mousedown",
            "description": "true if this is a mousedown event, false for mouseup"
          },
          {
            "type": "integer",
            "name": "button",
            "description": "the mouse button that was pressed, the values match DOM's MouseEvent.button"
          },
          {
            "type": "number",
            "name": "clientX",
            "description": "X-coordinates of the click"
          },
          {
            "type": "number",
            "name": "clientY",
            "description": "Y-coordinates of the click"
          }
        ]
      },
      {
        "name": "onPageZoom",
        "type": "function",
        "description": "Fires on page zoom events",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "Id of the Vivaldi window where the event was originated"
          },
          {
            "type": "number",
            "name": "steps",
            "description": "Number of basic steps to increase or decrease zoom."
          },
          {
            "type": "number",
            "name": "clientX",
            "description": "X-coordinates of the pointer position"
          },
          {
            "type": "number",
            "name": "clientY",
            "description": "Y-coordinates of the pointer position"
          }
        ]
      },
      {
        "name": "onBeforeUnloadDialogClosed",
        "type": "function",
        "description": "Fired when a beforeunload dialog has been closed.",
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "minimum": 0,
            "description": "Window Id containg the tab Id."
          },
          {
            "type": "integer",
            "name": "tabId",
            "minimum": 0,
            "description": "Tab id for the beforeunload dialog."
          },
          {
            "type": "boolean",
            "name": "proceed",
            "description": "If true, the tab operation that triggered the dialog has been allowed to proceed."
          }
        ]
      }
    ]
  }
]
