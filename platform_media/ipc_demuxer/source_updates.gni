import("//build/config/features.gni")
import("//vivaldi/gn/config/features.gni")

assert(vivaldi_use_system_media_demuxer,
    "This must be imported only when the flag is true")
assert(system_proprietary_codecs,
    "This must be imported only when the flag is true")

update_target("//media/test:pipeline_integration_test_base") {
  sources += [
    "//vivaldi/platform_media/ipc_demuxer/test/platform_media_pipeline_integration_test.cc",
    "//vivaldi/platform_media/ipc_demuxer/test/ipc_pipeline_test_setup.h",
    "//vivaldi/platform_media/ipc_demuxer/test/ipc_pipeline_test_setup.cc",
  ]

  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/ipc_demuxer/test/mac/data_request_handler_unittest.mm",
      "//vivaldi/platform_media/ipc_demuxer/test/ipc_pipeline_test_setup_mac.mm",
    ]
  }

  deps += [
    "//vivaldi/platform_media/ipc_demuxer:pipeline_types",
  ]
}

# Update sandbox files on Mac
if (is_mac) {
  update_target("//sandbox/policy/mac:package_sb_files") {
    if (!defined(deps)) {
      deps = []
    }
    sources -= [ "gpu.sb"]
    sources += [get_label_info("//vivaldi/platform_media/sandbox/mac:generate_gpu_sb_files", "target_gen_dir")+"/gpu.sb"]
    deps += ["//vivaldi/platform_media/sandbox/mac:generate_gpu_sb_files"]
  }
}

update_template_instance("//gpu/ipc/common:gpu_channel_mojom") {
  # In gpu_channel.mojom allow [EnableIf=vivaldi_use_system_media_demuxer] to
  # add our extra methods only when the platform media is enabled.
  if (!defined(enabled_features)) {
    enabled_features = []
  }
  enabled_features += [
    "vivaldi_use_system_media_demuxer"
  ]
}

update_target("//media/filters:filters") {
  deps += [ "//vivaldi/platform_media/ipc_demuxer:mojo" ]
}

update_target("//media/renderers:renderers") {
  sources += [
    "//vivaldi/platform_media/ipc_demuxer/gpu/data_source/ipc_data_source.cc",
    "//vivaldi/platform_media/ipc_demuxer/gpu/data_source/ipc_data_source.h",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/ipc_decoding_buffer.cc",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/ipc_decoding_buffer.h",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/ipc_media_pipeline.cc",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/ipc_media_pipeline.h",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/platform_media_pipeline.h",
    "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/platform_media_pipeline_factory.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_demuxer.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_demuxer.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_demuxer_stream.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_demuxer_stream.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_factory.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_factory.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/pass_through_decoder.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/pass_through_decoder.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/video_frame_transformer.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/video_frame_transformer.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_media_pipeline_host.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/ipc_media_pipeline_host.h",
    "//vivaldi/platform_media/ipc_demuxer/renderer/protocol_sniffer.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/protocol_sniffer.h",
  ]
  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/avf_media_reader.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/avf_media_reader.mm",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/data_request_handler.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/data_request_handler.mm",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/data_source_loader.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/mac/data_source_loader.mm",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/mac/avf_media_reader_runner.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/mac/avf_media_reader_runner.mm",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/mac/media_utils_mac.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/mac/media_utils_mac.mm",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/mac/platform_media_pipeline_mac.mm",
      "//vivaldi/platform_media/ipc_demuxer/mac/framework_type_conversions.h",
      "//vivaldi/platform_media/ipc_demuxer/mac/framework_type_conversions.mm",
    ]
    defines = [ "GPU_IMPLEMENTATION" ]

    if (!defined(frameworks)) {
      frameworks = []
    }
    frameworks += [
      "AudioToolbox.framework",
      "AVFoundation.framework",
      "MediaToolbox.framework",
      "CoreServices.framework",
    ]

    cflags = []

    if (!is_debug) {
      # VB-18038 audio doesn't work with -O2
      configs -= [ "//build/config/compiler:default_optimization" ]
      cflags += [ "-O1" ]
    }
  }

  if (is_win) {
    sources += [
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/win/wmf_byte_stream.cc",
      "//vivaldi/platform_media/ipc_demuxer/gpu/decoders/win/wmf_byte_stream.h",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/win/platform_media_pipeline_win.cc",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/win/wmf_media_pipeline.cc",
      "//vivaldi/platform_media/ipc_demuxer/gpu/pipeline/win/wmf_media_pipeline.h",
    ]
  }

  deps += [
    "//net",  # For GetMimeTypeFromFile

    # For platform media GPU decoders
    "//vivaldi/platform_media/ipc_demuxer:mojo",
    "//vivaldi/platform_media/ipc_demuxer:pipeline_types",
  ]
}

update_target("//content/renderer:renderer") {
  sources += [
    "//vivaldi/platform_media/ipc_demuxer/renderer/init_for_render_thread.cc",
    "//vivaldi/platform_media/ipc_demuxer/renderer/init_for_render_thread.h",
  ]
}
