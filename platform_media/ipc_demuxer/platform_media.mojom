// Copyright (c) 2021 Vivaldi Technologies AS. All rights reserved.

module platform_media.mojom;

import "mojo/public/mojom/base/time.mojom";
import "mojo/public/mojom/base/shared_memory.mojom";
import "ui/gfx/geometry/mojom/geometry.mojom";

enum StreamType {
  kAudio,
  kVideo,
};

interface PipelineFactory {
  StartNewPipeline(PipelineParams params) => (PipelineInitResult result);
};

interface Pipeline {
  ReadDecodedData(StreamType stream_type) => (DecodingResult? result);
  WillSeek();
  Seek(mojo_base.mojom.TimeDelta seek_time) => (bool success);

  // This helps to shutdown GPU side quicker than relying only on the disconnect
  // handlers.
  Stop();
};

interface PipelineDataSource {
  ReadRawData(int64 offset, int32 size) => (int32 read_size);
};

struct PipelineParams {
  int64 data_source_size;
  bool is_data_source_streaming;
  string mime_type;
  mojo_base.mojom.ReadOnlySharedMemoryRegion data_source_buffer;

  // GPU will call this to read raw data from renderer.
  pending_remote<PipelineDataSource> data_source;

  // GPU will respond to calls from the renderer on this pipeline.
  pending_receiver<Pipeline> pipeline;
};

struct PipelineInitResult {
  bool success;

  // If true indicates that no system libraries was found.
  bool not_available;
  int32 bitrate;
  TimeInfo time_info;
  AudioConfig audio_config;
  VideoConfig video_config;
};

union DecodingResult {
  //bool read_error;
  bool end_of_file;
  AudioConfig audio_config;
  VideoConfig video_config;
  DecodedData decoded_data;
};

struct TimeInfo {
  mojo_base.mojom.TimeDelta duration;
  mojo_base.mojom.TimeDelta start_time;
};

struct AudioConfig {
  // This should be media::SampleFormat, but that is not in mojo yet
  int32 format;
  int32 channel_count;
  int32 samples_per_second;
};

struct VideoConfig {
  gfx.mojom.Size coded_size;
  gfx.mojom.Rect visible_rect;
  gfx.mojom.Size natural_size;
  array<VideoPlaneConfig, 4> planes;

  // This should be media::VideoRotation, but that is not in mojo yet
  uint32 rotation;
};

struct VideoPlaneConfig {
  int32 stride;
  int32 offset;
  int32 size;
};

struct DecodedData {
  int32 size;
  mojo_base.mojom.TimeDelta timestamp;
  mojo_base.mojom.TimeDelta duration;

  // If this is null, use the previously sent region.
  mojo_base.mojom.ReadOnlySharedMemoryRegion? region;
};