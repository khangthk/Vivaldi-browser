import("//third_party/ffmpeg/ffmpeg_options.gni")

import("//build/config/features.gni")
import("//vivaldi/gn/config/features.gni")

assert(ffmpeg_branding == "Chrome")

ffmpeg_config_root =
    "//third_party/ffmpeg/" +
    "chromium/config/$ffmpeg_branding/$os_config/$ffmpeg_arch"

# We need to patch few config files that FFmpeg sources include via the include
# statements to replace media decoders that we cannot use with ones implemented
# via platform API. Chromium builds those configs during uptake of FFmpeg
# changes from the upstream and commit the result under $ffmpeg_config_root.
#
# *******************************
# *    VERY IMPORTANT NOTE!     *
# *******************************
#
# Whenever adding or removing an FFmpeg config file that is placed into the
# generated directory *always* remember to update with a new timestamp in
# `platform_media/source_update.gni` the line that modifies the include
# list with VIVALDI_FFMPEG_REBUILD define.
#
# Otherwise you may get a hard to figure out issue with Byggmakker builds
# that use the compilation cache. The caching code assumes that the location
# of an included header file does not change after the compilation. This
# is presumably to avoid potentially expensive include file re-lookup when
# deciding to use the cached version of the compilation result. But then
# Byggmakker uses the old cached result instead of recompiling the
# source when the only change was due to a new location of the config file.
# This results in an  executable using the old config.
#
# Altering the value of `VIVALDI_FFMPEG_REBUILD` changes the command line
# thus forcing the recompilation addressing this issue.

group("generate_config") {
  deps = [
    ":generate_decoder_list",
    ":generate_redirected_log",
  ]
}

generated_file("generate_decoder_list") {
  codec_subpath = "/libavcodec/codec_list.c"
  decoder_list_file = ffmpeg_config_root  + codec_subpath
  decoder_list_lines = read_file(decoder_list_file, "list lines")

  # Check the expected lines with FFmpeg software decoders before we
  # patched them out to replace with platform specific one or to remove.
  assert(
      "&ff_h264_decoder," == decoder_list_lines[1],
      "Unexpected format of $decoder_list_file"
  )
  assert(
      "&ff_aac_decoder," == decoder_list_lines[5],
      "Unexpected format of $decoder_list_file"
  )
  if (is_linux) {
    decoder_list_lines[1] = "//" + decoder_list_lines[1]
    decoder_list_lines[5] = "//" + decoder_list_lines[5]
  }
  if (is_mac) {
    decoder_list_lines[1] = "//" + decoder_list_lines[1]
    decoder_list_lines[5] = "&ff_aac_at_decoder,"
  }
  if (is_win) {
    # Declare first the decoder. On Mac it is not necessary as our decoder
    # is a fork of the decoder that FFmpeg already declared.
    decoder_list_lines[0] = "extern const AVCodec ffwmf_aac_decoder;" +
        decoder_list_lines[0]
    decoder_list_lines[1] = "//" + decoder_list_lines[1]
    decoder_list_lines[5] = "&ffwmf_aac_decoder,"
  }

  outputs = [target_gen_dir + codec_subpath]
  contents = decoder_list_lines
  output_conversion = "list lines"
}

# Override chromium/third_party/ffmpeg/libavutil/log.h with an implementation
# that uses Chromium logging.
generated_file("generate_redirected_log") {
  outputs = [target_gen_dir + "/libavutil/log.h"]
  contents = [
    "#include \"platform_media/ffmpeg/ffviv_log.h\""
  ]
  output_conversion = "list lines"
}
