import("//third_party/ffmpeg/ffmpeg_options.gni")

import("//build/config/features.gni")
import("//vivaldi/gn/config/features.gni")

assert(ffmpeg_branding == "Chrome")

ffmpeg_config_root =
    "//third_party/ffmpeg/" +
    "chromium/config/$ffmpeg_branding/$os_config/$ffmpeg_arch"

# Adjust the decoder list.
generated_file("generate_decoder_list") {
  codec_subpath = "/libavcodec/codec_list.c"
  decoder_list_file = ffmpeg_config_root  + codec_subpath
  decoder_list_lines = read_file(decoder_list_file, "list lines")

  # Disable h264 software decoder
  assert(
      "&ff_h264_decoder," == decoder_list_lines[1],
      "Unexpected format of $decoder_list_file"
  )
  decoder_list_lines[1] = "//" + decoder_list_lines[1]

  # Replace FFmpeg AAC software decoder with decoders using system API if any.
  assert(
      "&ff_aac_decoder," == decoder_list_lines[5],
      "Unexpected format of $decoder_list_file"
  )
  if (is_linux) {
    # No decoder on Linux
    decoder_list_lines[5] = "//" + decoder_list_lines[5]
  } else if (is_mac) {
    decoder_list_lines[5] = "&ff_aac_at_decoder,"
  } else if (is_win) {
    decoder_list_lines[0] = "extern const AVCodec ffwmf_aac_decoder;" +
        decoder_list_lines[0]
    decoder_list_lines[5] = "&ffwmf_aac_decoder,"
  } else {
    assert(false, "Unsupported platform")
  }

  outputs = [target_gen_dir + codec_subpath]
  contents = decoder_list_lines
  output_conversion = "list lines"
}

group("generate_config") {
  deps = [
      ":generate_decoder_list",
  ]
}

if (is_win) {
  generated_file("patch_ffmpeg_sigs") {
    # Append to ffmpeg.sigs extra functions that we call.
    sigs_file = "//third_party/ffmpeg/chromium/ffmpeg.sigs"
    sigs_lines = read_file(sigs_file, "list lines")
    sigs_lines += [
      "",
      "// Vivaldi additions",
      "struct FFWMF_LogInfo* ffwmf_get_log_info();"
    ]
    outputs = ["$target_gen_dir/patched_ffmpeg.sigs"]
    contents = sigs_lines
    output_conversion = "list lines"
  }
}
