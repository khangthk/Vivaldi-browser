import("//build/config/features.gni")
import("//vivaldi/gn/config/features.gni")

if (system_proprietary_codecs) {

update_target("//media/test:pipeline_integration_test_base") {
  sources += [
    "//vivaldi/platform_media/test/ipc_audio_decoder_unittest.cc",
    "//vivaldi/platform_media/test/platform_media_pipeline_integration_test.cc",
    "//vivaldi/platform_media/test/platform_pipeline_test_base.cc",
    "//vivaldi/platform_media/test/platform_pipeline_test_base.h",
    "//vivaldi/platform_media/test/ipc_pipeline_test_setup.h",
    "//vivaldi/platform_media/test/ipc_pipeline_test_setup.cc",
  ]

  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/test/mac/avf_data_buffer_queue_unittest.mm",
      "//vivaldi/platform_media/test/mac/data_request_handler_unittest.mm",
      "//vivaldi/platform_media/test/ipc_pipeline_test_setup_mac.mm",
    ]
  }

  deps += [
    "//vivaldi/platform_media/common:pipeline_types",
  ]
}

# Test files

#vivaldi/testdata/test/platform_media/bear_truncated.mp4
#vivaldi/testdata/test/platform_media/config_change_audio.mp4
#vivaldi/testdata/test/platform_media/config_change_video.mp4
#vivaldi/testdata/test/platform_media/what-does-the-fox-say.mp4
#vivaldi/testdata/test/platform_media/bear-320x240-16x9-aspect.mp4
#vivaldi/testdata/test/platform_media/bear_corrupt.mp4
#vivaldi/testdata/test/platform_media/nonzero-start-time.mp4
#vivaldi/testdata/test/platform_media/vivaldi-bear-320x240-16x9-aspect.mp4
#vivaldi/testdata/test/platform_media/vivaldi-bear_truncated.mp4
#vivaldi/testdata/test/platform_media/vivaldi-config_change_audio.mp4
#vivaldi/testdata/test/platform_media/vivaldi-config_change_video.mp4
#vivaldi/testdata/test/platform_media/what-does-the-fox-say.mp4

if (is_mac) {
  update_target("//sandbox/policy/mac:package_sb_files") {
    sources -= ["renderer.sb",
                "gpu.sb"]
    sources += [get_label_info("//vivaldi/platform_media/mac:generate_sb_files", "target_gen_dir")+"/renderer.sb"]
    sources += [get_label_info("//vivaldi/platform_media/mac:generate_gpu_sb_files", "target_gen_dir")+"/gpu.sb"]
    deps = ["//vivaldi/platform_media/mac:generate_sb_files",
            "//vivaldi/platform_media/mac:generate_gpu_sb_files"]
  }
}

update_template_instance("//gpu/ipc/common:gpu_channel_mojom") {
  # In gpu_channel.mojom allow [EnableIf=system_proprietary_codecs] to add our
  # extra methods only when the platform media is enabled.
  if (!defined(enabled_features)) {
    enabled_features = []
  }
  enabled_features += [
    "system_proprietary_codecs"
  ]
}

update_target("//media/filters:filters") {
  deps += [ "//vivaldi/platform_media/common:mojo" ]
}

update_target("//media/renderers:renderers") {
   sources += [
    "//vivaldi/platform_media/common/feature_toggles.h",
    "//vivaldi/platform_media/common/platform_logging_util.cc",
    "//vivaldi/platform_media/common/platform_logging_util.h",
    "//vivaldi/platform_media/gpu/data_source/ipc_data_source.cc",
    "//vivaldi/platform_media/gpu/data_source/ipc_data_source.h",
    "//vivaldi/platform_media/gpu/pipeline/ipc_decoding_buffer.cc",
    "//vivaldi/platform_media/gpu/pipeline/ipc_decoding_buffer.h",
    "//vivaldi/platform_media/gpu/pipeline/ipc_media_pipeline.cc",
    "//vivaldi/platform_media/gpu/pipeline/ipc_media_pipeline.h",
    "//vivaldi/platform_media/gpu/pipeline/platform_media_pipeline.h",
    "//vivaldi/platform_media/gpu/pipeline/platform_media_pipeline_factory.h",
    "//vivaldi/platform_media/renderer/decoders/debug_buffer_logger.cc",
    "//vivaldi/platform_media/renderer/decoders/debug_buffer_logger.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_audio_decoder.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_audio_decoder.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer_stream.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_demuxer_stream.h",
    "//vivaldi/platform_media/renderer/decoders/ipc_factory.cc",
    "//vivaldi/platform_media/renderer/decoders/ipc_factory.h",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder.cc",
    "//vivaldi/platform_media/renderer/decoders/pass_through_decoder.h",
    "//vivaldi/platform_media/renderer/decoders/video_frame_transformer.cc",
    "//vivaldi/platform_media/renderer/decoders/video_frame_transformer.h",
    "//vivaldi/platform_media/renderer/pipeline/ipc_media_pipeline_host.cc",
    "//vivaldi/platform_media/renderer/pipeline/ipc_media_pipeline_host.h",
    "//vivaldi/platform_media/renderer/pipeline/protocol_sniffer.cc",
    "//vivaldi/platform_media/renderer/pipeline/protocol_sniffer.h",
  ]
  if (is_mac) {
    sources += [
      "//vivaldi/platform_media/gpu/decoders/mac/avf_audio_tap.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_audio_tap.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_data_buffer_queue.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_data_buffer_queue.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_decoder.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_decoder.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_reader.h",
      "//vivaldi/platform_media/gpu/decoders/mac/avf_media_reader.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/data_request_handler.h",
      "//vivaldi/platform_media/gpu/decoders/mac/data_request_handler.mm",
      "//vivaldi/platform_media/gpu/decoders/mac/data_source_loader.h",
      "//vivaldi/platform_media/gpu/decoders/mac/data_source_loader.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_pipeline.h",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_pipeline.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_reader_runner.h",
      "//vivaldi/platform_media/gpu/pipeline/mac/avf_media_reader_runner.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/media_utils_mac.h",
      "//vivaldi/platform_media/gpu/pipeline/mac/media_utils_mac.mm",
      "//vivaldi/platform_media/gpu/pipeline/mac/platform_media_pipeline_mac.mm",
      "//vivaldi/platform_media/common/mac/framework_type_conversions.h",
      "//vivaldi/platform_media/common/mac/framework_type_conversions.mm",
      "//vivaldi/platform_media/renderer/decoders/mac/at_audio_decoder.cc",
      "//vivaldi/platform_media/renderer/decoders/mac/at_audio_decoder.h",
      "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer.cc",
      "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer.h",
      "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer_stream.cc",
      "//vivaldi/platform_media/renderer/decoders/mac/core_audio_demuxer_stream.h",
      "//vivaldi/platform_media/renderer/decoders/mac/scoped_audio_queue_ref.h",
      "//vivaldi/platform_media/renderer/decoders/mac/viv_video_decoder.h",
      "//vivaldi/platform_media/renderer/decoders/mac/viv_video_decoder.mm",
    ]

    defines = [ "GPU_IMPLEMENTATION" ]

    if (!defined(frameworks)) {
      frameworks = []
    }

    frameworks += [
      "AudioToolbox.framework",
      "AVFoundation.framework",
      "CoreMedia.framework",
      "CoreVideo.framework",
      "MediaToolbox.framework",
      "VideoToolbox.framework",
      "CoreServices.framework",
    ]

    cflags = []

    if (!is_debug) {
      # VB-18038 audio doesn't work with -O2
      configs -= [ "//build/config/compiler:default_optimization" ]
      cflags += [ "-O1" ]
    }
  }
  if (is_win) {
    sources += [
      "//vivaldi/platform_media/common/win/mf_util.cc",
      "//vivaldi/platform_media/common/win/mf_util.h",
      "//vivaldi/platform_media/gpu/decoders/win/wmf_byte_stream.cc",
      "//vivaldi/platform_media/gpu/decoders/win/wmf_byte_stream.h",
      "//vivaldi/platform_media/gpu/pipeline/win/platform_media_pipeline_win.cc",
      "//vivaldi/platform_media/gpu/pipeline/win/wmf_media_pipeline.cc",
      "//vivaldi/platform_media/gpu/pipeline/win/wmf_media_pipeline.h",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_audio_decoder.cc",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_audio_decoder.h",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_decoder_impl.cc",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_decoder_impl.h",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_video_decoder.cc",
      "//vivaldi/platform_media/renderer/decoders/win/wmf_video_decoder.h",
    ]

    libs += [
      "d3d9.lib",
      "dxva2.lib",
      "strmiids.lib",
      "mf.lib",
      "mfreadwrite.lib",
      "mfuuid.lib",
      "Propsys.lib",
    ]

    deps += [
      "//media/base/win:media_foundation_util",
    ]
  }
  if (is_linux) {
    sources += [
      "//vivaldi/platform_media/gpu/pipeline/linux/gstreamer_media_pipeline.cc",
      "//vivaldi/platform_media/gpu/pipeline/linux/gstreamer_media_pipeline.h",
      "//vivaldi/platform_media/gpu/pipeline/linux/platform_media_pipeline_linux.cc",
    ]
  }

  deps += [
    "//base:base_static",   # For vivaldi_switches
    "//net",  # For GetMimeTypeFromFile

    # For platform media GPU decoders
    "//vivaldi/platform_media/common:mojo",
    "//vivaldi/platform_media/common:pipeline_types",
  ]
}

update_target("//content/renderer:renderer") {
  sources += [
    "//vivaldi/platform_media/renderer/content/init_for_render_thread.cc",
    "//vivaldi/platform_media/renderer/content/init_for_render_thread.h",
  ]
}

} # system_proprietary_codecs

# --------------------
# fmpeg changes
# --------------------

if (system_proprietary_codecs) {
  update_target("//third_party/ffmpeg:ffmpeg_internal") {
    # Include AAC parser to the list of parsers ffmpeg uses.
    parser_list_file =
        "//third_party/ffmpeg/" + platform_config_root +
            "/libavcodec/parser_list.c"
    parser_list_lines = read_file(parser_list_file, "list lines")
    assert(
        "static const AVCodecParser * const parser_list[] = {" ==
            parser_list_lines[0],
        "Unexpected format of $parser_list_file"
    )
    parser_list_lines[0] += "&ff_aac_parser,"
    patched_parser_list = target_gen_dir + "/vivaldi/libavcodec/parser_list.c"
    write_file(patched_parser_list, parser_list_lines)

    sources += [
      "libavcodec/aac_ac3_parser.c",
      "libavcodec/aac_parser.c",
      "libavcodec/adts_header.c",
    ]

    # Include AAC decoder placeholder (Windows) or AT AAC decoder to the list of
    # AAC decoders.
    decoder_list_file =
        "//third_party/ffmpeg/" + platform_config_root +
            "/libavcodec/codec_list.c"
    decoder_list_lines = read_file(decoder_list_file, "list lines")
    assert(
        "static const AVCodec * const codec_list[] = {" ==
            decoder_list_lines[0],
        "Unexpected format of $decoder_list_file"
    )
    if (is_mac) {
      decoder_list_lines[0] += "&ff_aac_at_decoder,"
      patched_decoder_list = target_gen_dir + "/vivaldi/libavcodec/codec_list.c"
      write_file(patched_decoder_list, decoder_list_lines)
    }

    if (is_mac) {
      # Patch audiotoolboxdec.c to replace bad filter string with NULL.
      # TODO(igor@vivaldi.com): Find out what was the intention in the code behind
      # that string.
      audiotoolbox_source = "//third_party/ffmpeg/libavcodec/audiotoolboxdec.c"
      audiotoolbox_lines = []
      found_line_to_patch = false
      path_to_libavcodec_from_gen =
          rebase_path("libavcodec", target_gen_dir + "/vivaldi/libavcodec")
      foreach (line, read_file(audiotoolbox_source, "list lines")) {
        if (line ==
            "FFAT_DEC(aac,          AV_CODEC_ID_AAC, \"aac_adtstoasc\")") {
          assert(!found_line_to_patch,
                "dublicated line to patch in " + audiotoolbox_source)
          found_line_to_patch = true
          line = "FFAT_DEC(aac,          AV_CODEC_ID_AAC, NULL)"
        }

        # Adjust #include "foo.h" where foo.h is a file from libavcodec directory
        # so it points to the source dir from the generated dir.
        if (filter_exclude([line], ["#include \"*"]) == []) {
          # Line with include
          if (filter_include([line], ["*/*", "*\"config.h\""]) == []) {
            # include "foo.h" without slashes in foo and not config.h
            line = string_replace(
                line, "\"", "\"$path_to_libavcodec_from_gen/", 1)
          }
        }
        audiotoolbox_lines += [line]
      }
      assert(found_line_to_patch,
            "failed to find line to patch in " + audiotoolbox_source)
      patched_audiotoolbox_source =
          target_gen_dir + "/vivaldi/libavcodec/audiotoolboxdec.c"
      write_file(patched_audiotoolbox_source, audiotoolbox_lines)

      sources += [patched_audiotoolbox_source]
    }

    # Point include dirs to the patched files first
    include_dirs_orig = include_dirs
    include_dirs = []
    include_dirs = [target_gen_dir + "/vivaldi" ] + include_dirs_orig

  }

  if (is_mac) {
    update_target("//third_party/ffmpeg:ffmpeg") {
      if (!defined(frameworks)) {
        frameworks = []
      }
      frameworks += [ "AudioToolbox.framework" ]
    }
  }
}

if (is_linux) {
  declare_overrides() {
    # Vivaldi Linux need component build of ffmpeg
    is_component_ffmpeg = true
  }

  update_target("//third_party/ffmpeg:ffmpeg") {
    configs += [ "//vivaldi/gn/config:linux_386_linking"]
  }

  update_target("//chrome:chrome_initial") {
    configs += [ "//vivaldi/gn/config:linux_386_linking"]
  }
} # Linux
