@@include@@variables.include

APT_GET="`which apt-get 2> /dev/null`"
APT_CONFIG="`which apt-config 2> /dev/null`"

SOURCES_PREAMBLE="### THIS FILE IS AUTOMATICALLY CONFIGURED ###
# You may comment out this entry, but any other modifications may be lost.\n"

# Parse apt configuration and return requested variable value.
apt_config_val() {
  APTVAR="$1"
  if [ -x "$APT_CONFIG" ]; then
    "$APT_CONFIG" dump | sed -e "/^$APTVAR /"'!d' -e "s/^$APTVAR \"\(.*\)\".*/\1/"
  fi
}

# Remove expired repository/package signing key (4A3AA3D6), if present.
remove_old_key() {
  APT_KEY="`which apt-key 2>/dev/null`"
  if [ -x "$APT_KEY" ]; then
    if "$APT_KEY" list 2>/dev/null | grep -q '4A3A *A3D6'; then
      "$APT_KEY" del 4A3AA3D6 >/dev/null 2>&1
    fi
  fi
}

# Install the repository/package signing key (B69735B2), if it isn't already.
install_key() {
  APT_KEY="`which apt-key 2>/dev/null`"
  if [ -x "$APT_KEY" ]; then
    if ! "$APT_KEY" list 2>/dev/null | grep -q 'B697 *35B2'; then
      "$APT_KEY" add - >/dev/null 2>&1 <<KEYDATA
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
IPbk1c1Bi2zzh6OM15cMvH2ZaAaY1n28PmCcDJM=
=M6aM
-----END PGP PUBLIC KEY BLOCK-----
KEYDATA
    fi
  fi
}

# Install another key (C27AA466), if it isn't already, for future use.
install_future_key() {
  APT_KEY="`which apt-key 2>/dev/null`"
  if [ -x "$APT_KEY" ]; then
    if ! "$APT_KEY" list 2>/dev/null | grep -q 'C27A *A466'; then
      "$APT_KEY" add - >/dev/null 2>&1 <<KEYDATA
-----BEGIN PGP PUBLIC KEY BLOCK-----

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
ZaKxbt1C7BKkfi9+xbnrgvtheHeT13V9rEVLh90=
=FBCO
-----END PGP PUBLIC KEY BLOCK-----
KEYDATA
    fi
  fi
}

# Set variables for the locations of the apt sources lists.
find_apt_sources() {
  eval $("$APT_CONFIG" shell APT_SOURCESDIR 'Dir::Etc::sourceparts/d')
}

# Update the Google repository if it's not set correctly.
# Note: this doesn't necessarily enable the repository, it just makes sure the
# correct settings are available in the sources list.
# Returns:
# 0 - no update necessary
# 2 - error
update_bad_sources() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  # Don't do anything if the file isn't there, since that probably means the
  # user disabled it.
  if [ ! -r "$SOURCELIST" ]; then
    return 0
  fi

  # Basic check for active configurations (non-blank, non-comment lines).
  ACTIVECONFIGS=$(grep -v "^[[:space:]]*\(#.*\)\?$" "$SOURCELIST" 2>/dev/null)

  # Check if the correct repository configuration is in there.
  REPOMATCH=$(grep -E "^[[:space:]#]*\b$REPOCONFIGREGEX\b" "$SOURCELIST" \
    2>/dev/null)

  # Check if the correct repository is disabled.
  MATCH_DISABLED=$(echo "$REPOMATCH" | grep "^[[:space:]]*#" 2>/dev/null)

  # Now figure out if we need to fix things.
  BADCONFIG=1
  if [ "$REPOMATCH" ]; then
    # If it's there and active, that's ideal, so nothing to do.
    if [ ! "$MATCH_DISABLED" ]; then
      BADCONFIG=0
    else
      # If it's not active, but neither is anything else, that's fine too.
      if [ ! "$ACTIVECONFIGS" ]; then
        BADCONFIG=0
      fi
    fi
  fi

  if [ $BADCONFIG -eq 0 ]; then
    return 0
  fi

  # At this point, either the correct configuration is completely missing, or
  # the wrong configuration is active. In that case, just abandon the mess and
  # recreate the file with the correct configuration. If there were no active
  # configurations before, create the new configuration disabled.
  DISABLE=""
  if [ ! "$ACTIVECONFIGS" ]; then
    DISABLE="#"
  fi
  printf "$SOURCES_PREAMBLE" > "$SOURCELIST"
  printf "$DISABLE$REPOCONFIG\n" >> "$SOURCELIST"
  if [ $? -eq 0 ]; then
    return 0
  fi
  return 2
}

# Add the Google repository to the apt sources.
# Returns:
# 0 - sources list was created
# 2 - error
create_sources_lists() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  if [ -d "$APT_SOURCESDIR" ]; then
    printf "$SOURCES_PREAMBLE" > "$SOURCELIST"
    printf "$REPOCONFIG\n" >> "$SOURCELIST"
    if [ $? -eq 0 ]; then
      return 0
    fi
  fi
  return 2
}

# Remove our custom sources list file.
# Returns:
# 0 - successfully removed, or not configured
# !0 - failed to remove
clean_sources_lists() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources

  rm -f "$APT_SOURCESDIR/@@PACKAGE@@.list"
}

# Detect if the repo config was disabled by distro upgrade and enable if
# necessary.
handle_distro_upgrade() {
  if [ ! "$REPOCONFIG" ]; then
    return 0
  fi

  find_apt_sources
  SOURCELIST="$APT_SOURCESDIR/@@PACKAGE@@.list"
  if [ -r "$SOURCELIST" ]; then
    REPOLINE=$(grep -E "^[[:space:]]*#[[:space:]]*$REPOCONFIGREGEX[[:space:]]*# disabled on upgrade to .*" "$SOURCELIST")
    if [ $? -eq 0 ]; then
      sed -i -e "s,^[[:space:]]*#[[:space:]]*\(.*\)[[:space:]]*# disabled on upgrade to .*,\1," \
        "$SOURCELIST"
      LOGGER=$(which logger 2> /dev/null)
      if [ "$LOGGER" ]; then
        "$LOGGER" -t "$0" "Reverted repository modification: $REPOLINE."
      fi
    fi
  fi
}

DEFAULT_ARCH="@@ARCHITECTURE@@"

get_lib_dir() {
  if [ "$DEFAULT_ARCH" = "i386" ]; then
    LIBDIR=lib/i386-linux-gnu
  elif [ "$DEFAULT_ARCH" = "amd64" ]; then
    LIBDIR=lib/x86_64-linux-gnu
  elif [ "$DEFAULT_ARCH" = "armhf" ]; then
    LIBDIR=lib/arm-linux-gnueabihf
  elif [ "$DEFAULT_ARCH" = "arm64" ]; then
    LIBDIR=lib/aarch64-linux-gnu
  elif [ "$DEFAULT_ARCH" = "mipsel" ]; then
    LIBDIR=lib/mipsel-linux-gnu
  elif [ "$DEFAULT_ARCH" = "mips64el" ]; then
    LIBDIR=lib/mips64el-linux-gnuabi64
  else
    echo Unknown CPU Architecture: "$DEFAULT_ARCH"
    exit 1
  fi
}
