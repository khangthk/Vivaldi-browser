
assert(is_win || is_mac)

import("//build/config/python.gni")
import("//vivaldi/gn/config/features.gni")
import("//vivaldi/gn/config/signer_features.gni")

declare_args() {
  widevine_signing_script = ""
  widevine_verify_script = ""
  widevine_private_key = ""
  widevine_signing_cert = ""
}

# python2_action copied from Chromium

# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is a wrapper around action() that ensures that the script is
# run under a Python2 executable, even if the main script_executable is
# Python3.
#
# It supports all of action()'s arguments.
#
# TODO(crbug.com/1112471): Remove this once everything runs cleanly under
# Python3.
template("python2_action") {
  action(target_name) {
    # Forward all variables. Ensure that testonly and visibility are forwarded
    # explicitly, since this performs recursive scope lookups, which is
    # required to ensure their definition from scopes above the caller are
    # properly handled. All other variables are forwarded with "*", which
    # doesn't perform recursive lookups at all. See https://crbug.com/862232
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])
    forward_variables_from(invoker,
                           "*",
                           [
                             "testonly",
                             "visibility",
                           ])

    script = "//vivaldi/scripts/python2_action.py"
    _rebased_script = rebase_path(invoker.script, root_build_dir)
    inputs = []
    inputs = [ invoker.script ]
    if (defined(invoker.inputs)) {
      inputs += invoker.inputs
    }
    args = []
    args = [ _rebased_script ]
    if (defined(invoker.args)) {
      args += invoker.args
    }
  }
}

template("widevine_sign") {
  signing_target_name = "${target_name}_sign"
  verify_target_name = "${target_name}_verify"

  python2_action(signing_target_name) {
    forward_variables_from(invoker,
                           [
                             "file",
                             "signature_file",
                             "flags",
                             "deps",
                           ])

    script = widevine_signing_script

    if (!defined(signature_file)) {
      signature_file = "$file.sig"
    }

    inputs = [
      widevine_private_key,
      widevine_signing_cert,
    ]
    if (!is_full_signer) {
      inputs += [file]
    }

    outputs = [
      signature_file,
    ]

    args = [
      "--input",
      rebase_path(file),
      "--output",
      rebase_path(signature_file),
      "--private_key",
      rebase_path(widevine_private_key),
      "--certificate",
      rebase_path(widevine_signing_cert),
    ]

    if (defined(flags) && flags != 0) {
      args += [
        "--flags", "1",
      ]
    }
  }

  python2_action(verify_target_name) {
    forward_variables_from(invoker,
                           [
                             "file",
                             "signature_file",
                             "flags",
                             "deps",
                           ])

    script = widevine_verify_script

    if (!defined(signature_file)) {
      signature_file = "$file.sig"
    }

    inputs = [
      signature_file,
    ]
    if (!is_full_signer) {
      inputs += [file]
    }

    outputs = [ "${target_gen_dir}/${verify_target_name}.stamp"]

    args = [
      "--input",
      rebase_path(file),
      "--sig_file",
      rebase_path(signature_file),
      "--verbose",
    ]

    if (defined(flags) && flags != 0) {
      args += [
        "--flags", "1",
      ]
    }

    if(!defined(deps)) {
      deps = []
    }
    deps += [ ":${signing_target_name}" ]
  }

  group(target_name) {
    public_deps = [
      ":${signing_target_name}",
      ":${verify_target_name}",
    ]
  }
}
