import("//vivaldi/gn/config/version.gni")
import("//vivaldi/gn/config/product.gni")
import("//vivaldi/gn/command_action.gni")

assert(is_mac)

import("//vivaldi/gn/config/signer_features.gni")

build_app_dmg_script_path = "//vivaldi/thirdparty/create_dmg/create-dmg"

dmg_name = "Vivaldi.$vivaldi_version_full.dmg"
mac_product_name = "Vivaldi"
mac_app_name = "$root_build_dir/$mac_product_name.app"

perform_signing = vivaldi_signing_key != "" && vivaldi_signing_id != ""

signing_deps = []
dmg__signing_deps = []
if (perform_signing) {
  signing_deps += [ ":sign_mac" ]
  dmg__signing_deps += [ ":sign_dmg" ]

  mac_packaging_dir = "$root_build_dir/${mac_product_name}_Packaging"

  mac_app_name = "$root_build_dir/$mac_product_name-$vivaldi_version_full"
}

group("mac") {
  deps = [ ":build_dmg" ] + signing_deps + dmg__signing_deps
}

command_bash("build_dmg") {
  command = build_app_dmg_script_path
  deps = []
  if (!perform_signing || !is_full_mac_signer) {
    deps += [
              "//chrome/installer/mac",
              "//vivaldi:vivaldi",
            ]
  }
  deps += signing_deps

  icns = "//vivaldi/installer/mac/icons/$VIVALDI_RELEASE_KIND/disk_image.icns"
  eula = "//vivaldi/installer/mac/licenses/en.rtf"
  background = "//vivaldi/installer/mac/background/vivaldi_dmg_background.tif"

  inputs = [
    background,
    command,
    eula,
    icns,
    "//vivaldi/thirdparty/create_dmg/support/dmg-license.py",
    "//vivaldi/thirdparty/create_dmg/support/template.applescript",
  ]

  outputs = [
    "$root_build_dir/$dmg_name",
  ]

  args = [
    "--volname","Vivaldi $vivaldi_version_full.dmg",
    "--volicon", rebase_path(icns, root_build_dir),
    "--eula", rebase_path(eula, root_build_dir),
    "--background", rebase_path(background, root_build_dir),
    "--window-pos", "100", "100",
    "--window-size", "577", "366",
    "--text-size", "13",
    "--icon-size", "128",
    "--icon", "Vivaldi", "158", "152",
    "--icon", ".background", "1000", "152",
    "--icon", ".fseventsd", "1100", "152",
    "--icon", ".VolumeIcon.icns", "1200", "152",
    "--app-drop-link", "412", "152",
    "--format", "UDBZ",
    "--no-internet-enable",
    "Vivaldi.$vivaldi_version_full.dmg",
    rebase_path(mac_app_name, root_build_dir),
  ]
}

if (perform_signing) {
  group("sign_mac") {
    deps = [
      ":sign_package",
      ":create_tar",
    ]
  }

  action("sign_package") {
    if (!perform_signing || !is_full_mac_signer) {
      deps = [
        "//chrome:chrome_app",
        "//chrome/installer/mac",
        "//vivaldi:vivaldi",
      ]
    }
    script = "$mac_packaging_dir/sign_chrome.py"
    inputs = []
    outputs = ["$root_gen_dir/signed_package.done"]
    args = [
      "--identity", vivaldi_signing_id,
      "--input", ".",
      "--output", ".",
      "--disable-packaging",
    ]

    # hardening and notarization and disabled due to VB-58183
    if (is_full_mac_signer) {
      assert(vivaldi_notarize_account != "")
      assert(vivaldi_notarize_password != "")
      args += [
        "--notarize",
        "--notary-user", vivaldi_notarize_account,
        "--notary-password", vivaldi_notarize_password
      ]
    } else {
      args += [
        # Vivaldi does not use entitlements_plist or provisioning_profile
        # so using this flag to disable that part of the code
        "--development",
      ]
    }
  }

  action("sign_dmg") {
    deps = [
      ":build_dmg",
    ]
    script = "sign_dmg.py"
    inputs = ["$root_build_dir/$dmg_name"]
    outputs = ["$root_gen_dir/signed_dmg.done"]
    args = [
      "--identity", vivaldi_signing_id,
    ]

    if (is_full_mac_signer) {
      assert(vivaldi_notarize_account != "")
      assert(vivaldi_notarize_password != "")
      args += [
        "--notarize",
        "--notary-user", vivaldi_notarize_account,
        "--notary-password", vivaldi_notarize_password
      ]
    }
    args += [ dmg_name ]
  }

  #correct permissions in app before tar-ing it.
  system_command("chmod_app") {
    deps = [
      ":sign_package",
    ]
    if (!perform_signing || !is_full_mac_signer) {
      deps += [
        "//chrome:chrome_app",
        "//chrome/installer/mac",
        "//vivaldi:vivaldi",
      ]
    }
    command = "find"
    inputs = []
    outputs = [
      "$root_gen_dir/chmod.done",
    ]
    args = [
      rebase_path(mac_app_name, root_build_dir),
      "-exec", "chmod", "-h", "a-st+rX,u+w,go-w", "{}", ";"
    ]
  }

  system_command("create_tar") {
    deps = [
      ":chmod_app",
      ":sign_package",
    ]
    command = "tar"
    tar_path = "$root_build_dir/Vivaldi.$vivaldi_version_full.tar.xz"
    inputs = [
      "$root_gen_dir/chmod.done",
      "$root_gen_dir/signed_package.done",
    ]
    outputs = [tar_path]

    args = [
      "-C",
      rebase_path(mac_app_name, root_build_dir),
      "-cJf",
      rebase_path(tar_path, root_build_dir),
      "$mac_product_name.app",
    ]
  }
}
