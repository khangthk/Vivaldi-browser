#!/usr/bin/env python

import argparse
import os
import sys

GAME_GEN_FILE_HEAD_TEMPLATE = """\
// Copyright (c) 2020 Vivaldi Technologies AS. All rights reserved
//
// This file was automatically generated by generate-asset-definitions.py from
// %(origin_name)s.
"""

GAME_GEN_TEMPLATE = """\
%(top_heading)s
%(top_function)s
%(function_body)s
%(bottom_function)s
"""

GAME_GEN_CC_DEFINITION_TEMPLATE_HEADER = """\
void CreateGameUIAssets(content::WebUIDataSource* html_source) {"""

GAME_GEN_CC_DEFINITION_TEMPLATE_FOOTER = """\
}"""

GAME_GEN_CC_DEFINITION_TEMPLATE_ENTRY = """\
  html_source->AddResourcePath("%(filename)s", %(definition)s);
"""

GAME_GRDP_TEMPLATE_HEADER = """\
<?xml version="1.0" encoding="utf-8"?>
<!-- Game specific resources (included from vivaldi_native_resources.grd).
This file was automatically generated by generate-asset-definitions.py from
%(origin_name)s. -->
"""

GAME_GRDP_TEMPLATE_START = """\
<grit-part>
"""

GAME_GRDP_TEMPLATE_ENTRY = """\
  <include name="%(definition)s" file="../../ui/webui/game/%(filename)s" type="BINDATA" />
"""

GAME_GRDP_TEMPLATE_END = """\
</grit-part>"""

GAME_GRDP_GEN_TEMPLATE = """\
%(grdp_heading)s
%(grdp_start)s
%(grdp_body)s
%(grdp_end)s
"""

def main():
    """Main script code"""
    parser = argparse.ArgumentParser(
        description='Generates relevant C++ files from a Vivaldia game checkout.')

    parser.add_argument('--game-dir',
        help="The game checkout, typically under the /release directory.")
    parser.add_argument('--res-file-out', type=argparse.FileType('wb'),
        help="The output resource file, typically vivaldi_games_resources.grdp")
    parser.add_argument('--code-file-out', type=argparse.FileType('wb'),
        help="The output code file, typically vivaldi_game_resources.inc")
    args = parser.parse_args()

    top_heading  = GAME_GEN_FILE_HEAD_TEMPLATE % {
        "origin_name": args.game_dir
    }
    top_function = GAME_GEN_CC_DEFINITION_TEMPLATE_HEADER
    bottom_function = GAME_GEN_CC_DEFINITION_TEMPLATE_FOOTER

    allfiles = []

    for subdir, dirs, files in os.walk(args.game_dir):
        for file in files:
            filepath = subdir + '/' + file

            index = filepath.find('assets')
            if (index > -1):
                """ strip path """
                filepath = filepath[index:]
            else:
                """ otherwise just keep the filename for root files """
                filepath = filepath.rsplit('/', 1)[1]

            filepath = filepath.replace('\\', '/')

            allfiles.append(filepath)

    function_body = ""
    grdp_body = ""

    for file in allfiles:
        definition = 'IDR_VIVALDI_GAME_' + file.replace('/', '_').replace('-', '_').upper()
        index = definition.find('.')
        if (index > -1):
            """ strip extension """
            definition = definition[:index]

        function_body += GAME_GEN_CC_DEFINITION_TEMPLATE_ENTRY % {
            "filename": file,
            "definition": definition
        }
        grdp_body += GAME_GRDP_TEMPLATE_ENTRY % {
            "filename": file,
            "definition": definition
        }

    args.code_file_out.write(GAME_GEN_TEMPLATE % {
        "top_heading": top_heading,
        "top_function": top_function,
        "function_body": function_body,
        "bottom_function": bottom_function
    })

    grdp_heading = GAME_GRDP_TEMPLATE_HEADER % {
        "origin_name": args.game_dir
    }

    grdp_start = GAME_GRDP_TEMPLATE_START
    grdp_end = GAME_GRDP_TEMPLATE_END

    args.res_file_out.write(GAME_GRDP_GEN_TEMPLATE % {
        "grdp_heading": grdp_heading,
        "grdp_start": grdp_start,
        "grdp_body": grdp_body,
        "grdp_end": grdp_end
    })

if __name__ == "__main__":
    main()
