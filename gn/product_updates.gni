import("//build/config/chrome_build.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/toolchain/gcc_toolchain.gni")
import("//vivaldi/gn/config/product.gni")
import("//vivaldi/gn/config/version.gni")

if (!is_android && !is_mac) {
  update_target("//chrome:chrome_initial") {
    if (is_win) {
      output_name = "initialexe/vivaldi"
    } else {
      output_name = "vivaldi"
    }
  }
}

if (is_win) {
  update_target("//chrome:chrome_dll") {
    output_name = "vivaldi"
  }

  update_target("//chrome:reorder_imports") {
    inputs = []
    outputs = []
    inputs = [
      "$root_out_dir/initialexe/vivaldi.exe",
    ]
    outputs = [
      "$root_out_dir/vivaldi.exe",
      "$root_out_dir/vivaldi.exe.pdb",
    ]
  }

  update_target("//chrome/chrome_elf:chrome_elf") {
    output_name = "vivaldi_elf"
  }

  update_template_instance(
      "//chrome/app/version_assembly:version_assembly_manifest") {
    output = "$root_build_dir/$vivaldi_version_full.manifest"
  }

  _platform_suffix = ""
  if (target_cpu == "x64") {
    _platform_suffix = ".x64"
  }

  update_target(
      "//chrome/installer/mini_installer:mini_installer_archive") {
    vivaldi_release_file = "$root_gen_dir/vivaldi/vivaldi.release"
    inputs -= [
      "$root_out_dir/chrome.dll",
      "$root_out_dir/chrome.exe",
      release_file
    ]
    inputs += [
      "$root_out_dir/vivaldi.dll",
      "$root_out_dir/vivaldi.exe",
      "$root_out_dir/vivaldi_proxy.exe",
      "$root_out_dir/update_notifier.exe",
      vivaldi_release_file
    ]
    deps+= [
      "//vivaldi/update_notifier",
      "//vivaldi/installer/win:vivaldi_release",
      "//vivaldi/tools/vivaldi_proxy"
    ]
    sign_executables =
        defined(invoker.sign_executables) && invoker.sign_executables
    outputs -= [ "$output_dir/chrome.7z" ]
    if (!is_component_build) {
      outputs -= [ "$output_dir/chrome.packed.7z" ]
    }

    # Have to keep the sequence due to the archive.d file being keyed to the first name
    temp = outputs
    outputs = []
    outputs += [ "$output_dir/vivaldi.7z" ]
    if (!is_component_build) {
      outputs += [ "$output_dir/vivaldi.packed.7z" ]
    }
    outputs += temp
    args -= [
      "--input_file",
      rebase_path(release_file, root_build_dir),
    ]
    args += [
      "--input_file",
      rebase_path(vivaldi_release_file, root_build_dir),
      "--vivaldi-version",
      rebase_path("//vivaldi/VIVALDI_VERSION", root_build_dir),
      "--vivaldi-build-version",
      "$GLOBAL_BUILDNUM",
    ]
    if (sign_executables) {
      args += [
        "--sign-executables",
        "--vivaldi-sign-key", vivaldi_signing_key,
        "--vivaldi-sign-cmd", vivaldi_signing_command,
      ]
    }
  }

  update_target("//chrome/installer/mini_installer:mini_installer") {
    output_name = "Vivaldi.${vivaldi_version_full}${_platform_suffix}"
  }

  update_template_instance("//chrome:chrome_dll_version") {
    sources -= ["app/chrome_dll.ver"]
    sources += [
      "//vivaldi/app/other_resources/vivaldi_dll.ver"
    ]
  }

  update_template_instance("//chrome:chrome_exe_version") {
    sources -= ["app/chrome_exe.ver"]
    sources += [
      "//vivaldi/app/other_resources/vivaldi_exe.ver"
    ]
  }

  update_template_instance("//chrome/chrome_elf:chrome_elf_resources") {
    sources -= ["chrome_elf.ver"]
    sources += [
      "//vivaldi/app/other_resources/vivaldi_elf.ver"
    ]
  }
}

if (is_android) {
  update_template_instance("//chrome/android:chrome_public_apk") {
    apk_name = "Vivaldi.${vivaldi_version_full}"
    lint_suppressions_file = "$root_gen_dir/vivaldi/android/merged_suppression.xml"
    lint_suppressions_dep = "//vivaldi/android:generate_merged_lint_suppression_file"
  }
}

#if (!is_android) {
  update_template_instance("//chrome/app/vector_icons:chrome_vector_icons") {
    icons -= ["${branding_path_component}/product.icon"]
    icons += ["//vivaldi/app/resources/vector_icons/product.icon"]
  }

  update_template_instance("//ui/message_center:message_center_vector_icons") {
    icons -= ["product.icon"]
    icons += ["//vivaldi/app/resources/message_center_vector_icons/product.icon"]
  }
#}

#if (is_linux) {
#  if (is_official_build) {
#    Need to fix scope handling for variant toolchains in the GN tools
#    update_template_instance("//chrome:chrome_symbols") {
#      binary = "$root_out_dir/vivaldi"
#    }
#  }
#  Need to fix scope handling for variant toolchains in the GN tools
#  update_target("//chrome:xdg_mime") {
#    sources -= [
#      "//chrome/app/theme/$branding_path_component/product_logo_48.png"
#    ]
#    sources += [
#      "//vivaldi/app/resources/theme/$VIVALDI_RELEASE_KIND/product_logo_48.png"
#    ]
#  }
#}

if (enable_resource_whitelist_generation && is_win) {
  update_template_instance("//chrome:resource_whitelist") {
    inputs -= [ "$root_out_dir/chrome.dll.pdb" ]
    inputs += [ "$root_out_dir/vivaldi.dll.pdb" ]
    # Update notifier resources
    inputs += [ "$root_out_dir/update_notifier.exe.pdb" ]
    deps += [ "//vivaldi/update_notifier"]
  }
}
